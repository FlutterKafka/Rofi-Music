#!/bin/bash
export LC_ALL=C

# Version and dependency check
mpv_version=$(mpv --version | head -1 | cut -d' ' -f2)
if [[ "$mpv_version" < "0.30" ]]; then
  error_exit "mpv_version $mpv_version is too old; requires 0.30+"
fi
command -v choose >/dev/null || error_exit "choose required"
command -v terminal-notifier >/dev/null || error_exit "terminal-notifier required"

# Unified error function
error_exit() {
  local message="$1"
  echo "$message" >>/tmp/rofi-music.log
  notification "$message"
  exit 1
}

# Notification messages truncated to 50 characters
notification() {
  local message="$1"
  message="${message:0:50}"
  terminal-notifier -message "$message" >/dev/null 2>&1
}

playlists() {
  local playlists="$1"
  [ -d "$playlists" ] || error_exit "Playlists not found"
  (ls -1 "$playlists" | sort -f; echo "Exit")
}

songs() {
  local songs="$1"
  [ -d "$songs" ] || error_exit "Songs not found"
  echo "Play All"
  for file in "$songs"/*.{m4a,mp3,flac}; do
    [ -f "$file" ] && printf '%s\n' "${file##*/}";
  done | sort -f
}

main() {
  local playlists="${1:-$HOME/Music}"

  # Dynamic row calculation for playlists
  local playlists_count=$(playlists "$playlists" | wc -l | awk '{print $1 + 1}')
  if [ "$playlists_count" -gt 20 ]; then
    playlists_count=20
  fi

  # Spawn initial menu with all detected playlists in specified directory
  local menu=$(playlists "$playlists" | choose -w 24 -n "$playlists_count")
  [ -z "$menu" ] || [ "$menu" = "Exit" ] && { notification "Exiting"; exit 0; }

  # User selected playlist
  local selected_playlist="$playlists/$menu"

  # Dynamic row calculation for songs
  local songs_count=$(songs "$selected_playlist" | wc -l | awk '{print $1 + 1}')
  if [ "$songs_count" -gt 20 ]; then
    songs_count=20
  fi

  # Spawn menu with all songs in user selected playlist
  local choice=$(songs "$selected_playlist" | choose -w 36 -n "$songs_count")
  [ -z "$choice" ] && { notification "No song selected"; exit 1; }

  # Logic for playing all or song selection
  if [ "$choice" = "Play All" ]; then
    notification "Playing all songs in $menu"
    mpv --no-video --shuffle "$selected_playlist"/*.{m4a,mp3,flac} --loop-playlist >/dev/null 2>&1 &
  else
    local selected_song="$selected_playlist/$choice"
    notification "Playing $choice"
    mpv --no-video "$selected_song" --loop >/dev/null 2>&1 &
  fi
}

# Handles --help documentation arguments
help() {
cat << EOF
Usage: rofi-music [OPTION] [MUSIC_DIRECTORY]
A script to select and play music playlists or songs using mpv.

Options:
  -h, --help        Display this help message and exit

Arguments:
  MUSIC_DIRECTORY   Directory containing music playlists (default: ~/Music)

Examples:
  rofi-music ~/Music/Playlists  # Uses specified directory

Dependencies:
  - mpv (version 0.30 or higher)
  - choose
  - terminal-notifier
EOF
}
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  help
  exit 0
elif [ -n "$1" ] && [ "${1#-}" != "$1" ]; then
  help
  exit 1
fi

# Logic for stopping playback or starting the script
if pkill -f mpv; then
  notification "Stopping playback"
else
  main "$@"
fi
